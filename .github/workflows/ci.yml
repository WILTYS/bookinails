name: Bookinails CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bookinails_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bookinails_test
        SECRET_KEY: test-secret-key
        STRIPE_SECRET_KEY: sk_test_fake_key
      run: |
        pytest tests/ -v --tb=short
        
    - name: Lint with flake8
      working-directory: ./backend
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  # Frontend Tests & Build
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Lint
      working-directory: ./frontend
      run: npm run lint
      
    - name: Type check
      working-directory: ./frontend
      run: npx tsc --noEmit
      
    - name: Build
      working-directory: ./frontend
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000
      run: npm run build

  # Security Audit
  security-audit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to staging (on main branch)
  deploy-staging:
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy Backend to Render
      env:
        RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
      run: |
        if [ ! -z "$RENDER_DEPLOY_HOOK" ]; then
          curl -X POST "$RENDER_DEPLOY_HOOK"
          echo "✅ Backend deployed to Render"
        else
          echo "⚠️ No Render deploy hook configured"
        fi
        
    - name: Deploy Frontend to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
        vercel-args: '--prod'

  # Health Check
  health-check:
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Wait for deployment
      run: sleep 60
      
    - name: Health Check API
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" https://bookinails-api.onrender.com/health || echo "000")
        if [ "$response" = "200" ]; then
          echo "✅ API Health Check Passed"
        else
          echo "❌ API Health Check Failed (HTTP $response)"
          exit 1
        fi
        
    - name: Health Check Frontend
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" https://bookinails.vercel.app || echo "000")
        if [ "$response" = "200" ]; then
          echo "✅ Frontend Health Check Passed"
        else
          echo "❌ Frontend Health Check Failed (HTTP $response)"
          exit 1
        fi
